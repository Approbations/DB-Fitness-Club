-- создание таблиц
CREATE TABLE IF NOT EXISTS "client" (
	"id" UUID NOT NULL UNIQUE,
	"first_name" VARCHAR(255) NOT NULL,
	"last_name" VARCHAR(255) NOT NULL,
	"birth_date" DATE NOT NULL,
	"email" VARCHAR(255) NOT NULL,
	PRIMARY KEY("id")
);


CREATE TABLE IF NOT EXISTS "schedule" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"id_class_type" INTEGER NOT NULL,
	"id_trainer" UUID NOT NULL,
	"start_class" DATE NOT NULL,
	"end_class" DATE NOT NULL,
	"room" INTEGER NOT NULL,
	PRIMARY KEY("id")
);


CREATE TABLE IF NOT EXISTS "gym_membership" (
	"id" UUID NOT NULL UNIQUE,
	"id_client" UUID NOT NULL,
	"created_date" DATE NOT NULL,
	"start_date" DATE NOT NULL,
	"level" INTEGER NOT NULL,
	"status" VARCHAR(255) NOT NULL,
	PRIMARY KEY("id")
);


CREATE INDEX "gym_membership_index_0"
ON "gym_membership" ("id");

CREATE TABLE IF NOT EXISTS "levels" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL,
	"duration" INTEGER NOT NULL,
	"price" DECIMAL NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "equipment" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"start_of_operation" DATE NOT NULL,
	"id_type" INTEGER NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "equipment_type" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL UNIQUE,
	"service_interval" INTEGER,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "staff" (
	"id" UUID NOT NULL UNIQUE,
	"first_name" VARCHAR(255) NOT NULL,
	"last_name" VARCHAR(255) NOT NULL,
	"position" VARCHAR(255) NOT NULL,
	"salary" DECIMAL NOT NULL,
	"hire_date" DATE NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "client_visit" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"id_client" UUID NOT NULL,
	"check_in" DATE NOT NULL,
	"check_out" DATE NOT NULL,
	"id_membership" UUID NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "class" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL,
	"description" TEXT,
	"max_clients" INTEGER,
	"is_individual" BOOLEAN NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "equipment_usage" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"id_class_schedule" INTEGER NOT NULL,
	"id_equipment" INTEGER NOT NULL,
	"quantity" INTEGER NOT NULL DEFAULT 1,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "booking" (
	"id" SERIAL NOT NULL UNIQUE,
	"id_client" UUID NOT NULL,
	"id_schedule" INTEGER NOT NULL,
	"booking_date" TIMESTAMPTZ NOT NULL,
	"status_booking" VARCHAR(255) NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "room" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL,
	"capacity" INTEGER NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "equipment_service" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"id_equipment" INTEGER NOT NULL,
	"service_data" DATE NOT NULL,
	"next_service_data" DATE NOT NULL,
	"notes" TEXT,
	"cost" DECIMAL NOT NULL,
	PRIMARY KEY("id")
);


-- добавление отношений
ALTER TABLE "gym_membership"
ADD FOREIGN KEY("level") REFERENCES "levels"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "equipment"
ADD FOREIGN KEY("id_type") REFERENCES "equipment_type"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "client_visit"
ADD FOREIGN KEY("id_client") REFERENCES "client"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "schedule"
ADD FOREIGN KEY("id_class_type") REFERENCES "class"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE "schedule"
ADD FOREIGN KEY("id_trainer") REFERENCES "staff"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE "equipment_usage"
ADD FOREIGN KEY("id_equipment") REFERENCES "equipment"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "equipment_usage"
ADD FOREIGN KEY("id_class_schedule") REFERENCES "schedule"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "gym_membership"
ADD FOREIGN KEY("id_client") REFERENCES "client"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE "client_visit"
ADD FOREIGN KEY("id_membership") REFERENCES "gym_membership"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE "booking"
ADD FOREIGN KEY("id_schedule") REFERENCES "schedule"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "booking"
ADD FOREIGN KEY("id_client") REFERENCES "client"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE "schedule"
ADD FOREIGN KEY("room") REFERENCES "room"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE "equipment_service"
ADD FOREIGN KEY("id_equipment") REFERENCES "equipment"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;


-- добавление ограничений для таблиц
ALTER TABLE "client"
ADD CONSTRAINT chk_client_email CHECK ("email" ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
ADD CONSTRAINT chk_client_birth_date CHECK ("birth_date" <= CURRENT_DATE - INTERVAL '16 years'),
ADD CONSTRAINT uq_client_email UNIQUE ("email");

ALTER TABLE "schedule"
ADD CONSTRAINT chk_schedule_dates CHECK ("end_class" > "start_class");

ALTER TABLE "gym_membership"
ADD CONSTRAINT chk_membership_dates CHECK ("start_date" >= "created_date"),
ADD CONSTRAINT chk_membership_status CHECK ("status" IN ('active', 'frozen', 'expired', 'cancelled'));

ALTER TABLE "levels"
ADD CONSTRAINT chk_levels_duration CHECK ("duration" > 0),
ADD CONSTRAINT chk_levels_price CHECK ("price" >= 0);

ALTER TABLE "equipment"
ADD CONSTRAINT chk_equipment_start_date CHECK ("start_of_operation" <= CURRENT_DATE);

ALTER TABLE "staff"
ADD CONSTRAINT chk_staff_salary CHECK ("salary" >= 0),
ADD CONSTRAINT chk_staff_hire_date CHECK ("hire_date" <= CURRENT_DATE),
ADD CONSTRAINT chk_staff_position CHECK ("position" IN ('trainer', 'administrator', 'manager', 'cleaner'));

ALTER TABLE "client_visit"
ADD CONSTRAINT chk_visit_dates CHECK ("check_out" >= "check_in");

ALTER TABLE "class"
ADD CONSTRAINT chk_class_max_clients CHECK ("max_clients" > 0);

ALTER TABLE "equipment_usage"
ADD CONSTRAINT chk_equipment_quantity CHECK ("quantity" > 0);

ALTER TABLE "booking"
ADD CONSTRAINT chk_booking_status CHECK ("status_booking" IN ('confirmed', 'pending', 'cancelled', 'completed'));

ALTER TABLE "room"
ADD CONSTRAINT chk_room_capacity CHECK ("capacity" > 0);

ALTER TABLE "equipment_service"
ADD CONSTRAINT chk_service_dates CHECK ("next_service_data" > "service_data"),
ADD CONSTRAINT chk_service_cost CHECK ("cost" >= 0);

ALTER TABLE "gym_membership" ALTER COLUMN "created_date" SET DEFAULT CURRENT_DATE;
ALTER TABLE "booking" ALTER COLUMN "booking_date" SET DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE "client_visit" ALTER COLUMN "check_in" SET DEFAULT CURRENT_DATE;

ALTER TABLE "booking"
ADD CONSTRAINT unique_booking_client_schedule UNIQUE ("id_client", "id_schedule");

-- добавление генерации uuid
ALTER TABLE client
ALTER COLUMN id SET DEFAULT gen_random_uuid();
